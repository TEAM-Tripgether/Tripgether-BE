name: PROJECT-SAMPLE-CICD

on:
  push:
    branches: ["deploy"]
  workflow_dispatch:  # 수동 트리거 옵션 추가

jobs:
  prepare-build:
    name: 환경 설정 및 준비
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.current_version.outputs.version }}
      build_number: ${{ steps.current_version.outputs.build_number }}
      current_version: ${{ steps.current_version.outputs.current_version }}
      project_type: ${{ steps.current_version.outputs.project_type }}

    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git 설정 및 최신 상태 동기화
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull origin deploy

      - name: 버전 관리 스크립트 권한 설정
        run: |
          if [ -f ".github/scripts/version_manager.sh" ]; then
            chmod +x .github/scripts/version_manager.sh
            echo "✅ 버전 관리 스크립트 권한 설정 완료"
          else
            echo "⚠️ .github/scripts/version_manager.sh 파일을 찾을 수 없습니다."
            exit 1
          fi

      # 범용 버전 관리 - 모든 프로젝트 타입 지원
      - name: 현재 버전 및 프로젝트 정보 확인
        id: current_version
        run: |
          # version_manager.sh 실행하여 버전 가져오기
          VERSION_INFO=$(./.github/scripts/version_manager.sh get | tail -n 1)
          # 프로젝트 타입 가져오기
          PROJECT_TYPE=$(grep "^project_type:" version.yml | sed 's/project_type: *"\([^"]*\)".*/\1/')
          
          echo "프로젝트 타입: $PROJECT_TYPE"
          echo "버전 정보: $VERSION_INFO"
          
          # 프로젝트 타입별 버전 파싱 로직
          case "$PROJECT_TYPE" in
            "flutter")
              # Flutter 형식 (1.2.3+45 또는 1.2.3)
              if grep -q "+" <<< "$VERSION_INFO"; then
                VERSION=$(echo "$VERSION_INFO" | cut -d'+' -f1)
                BUILD_NUMBER=$(echo "$VERSION_INFO" | cut -d'+' -f2)
              else
                VERSION="$VERSION_INFO"
                BUILD_NUMBER="1"  # 기본값
              fi
              CURRENT_VERSION="${VERSION}+${BUILD_NUMBER}"
              ;;
              
            "spring"|"java")
              # Spring/Java 형식 (보통 1.2.3)
              VERSION="$VERSION_INFO"
              BUILD_NUMBER=$(date +%Y%m%d%H%M)  # 타임스탬프 사용
              CURRENT_VERSION="$VERSION"
              ;;
              
            "react"|"node"|"react-native"|"basic")
              # 일반 JS/TS 프로젝트 (1.2.3)
              VERSION="$VERSION_INFO"
              BUILD_NUMBER=$(date +%s)  # Unix 타임스탬프
              CURRENT_VERSION="$VERSION"
              ;;
              
            *)
              # 기본 처리
              VERSION="$VERSION_INFO"
              BUILD_NUMBER="1"
              CURRENT_VERSION="$VERSION"
              ;;
          esac
          
          # 결과 출력
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "project_type=$PROJECT_TYPE" >> $GITHUB_OUTPUT
          
          echo "✅ 버전 정보 준비 완료"
          echo "📋 현재 버전: $CURRENT_VERSION (버전: $VERSION, 빌드번호: $BUILD_NUMBER)"
          echo "🔧 프로젝트 타입: $PROJECT_TYPE"

  # 플러터 프로젝트 빌드 예시
  build-flutter:
    name: Flutter 앱 빌드
    needs: prepare-build
    if: needs.prepare-build.outputs.project_type == 'flutter'
    runs-on: ubuntu-latest
    
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v4
      
      - name: Flutter 설정
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          
      - name: 의존성 설치
        run: flutter pub get
        
      - name: Flutter 앱 빌드
        run: |
          flutter build apk \
            --release \
            --build-name=${{ needs.prepare-build.outputs.version }} \
            --build-number=${{ needs.prepare-build.outputs.build_number }}
            
      - name: 빌드 결과물 업로드
        uses: actions/upload-artifact@v4
        with:
          name: flutter-apk
          path: build/app/outputs/flutter-apk/app-release.apk

  # 스프링 부트 프로젝트 빌드 예시
  build-spring:
    name: Spring Boot 앱 빌드
    needs: prepare-build
    if: needs.prepare-build.outputs.project_type == 'spring'
    runs-on: ubuntu-latest
    
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v4
        
      - name: JDK 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Gradle 캐시
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          
      - name: Gradle 권한 설정
        run: chmod +x ./gradlew
        
      - name: Gradle 빌드
        run: |
          ./gradlew clean build -x test \
            -Pversion=${{ needs.prepare-build.outputs.version }}

      - name: 빌드 결과물 업로드
        uses: actions/upload-artifact@v4
        with:
          name: spring-jar
          path: build/libs/*.jar

  # Node.js 프로젝트 빌드 예시
  build-node:
    name: Node.js 앱 빌드
    needs: prepare-build
    if: needs.prepare-build.outputs.project_type == 'node' || needs.prepare-build.outputs.project_type == 'react'
    runs-on: ubuntu-latest
    
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v4
        
      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 의존성 설치
        run: npm ci
        
      - name: 버전 정보 주입
        run: |
          # package.json에 버전 정보 업데이트
          npx json -I -f package.json -e "this.version='${{ needs.prepare-build.outputs.version }}'"
        
      - name: 빌드
        run: npm run build
        
      - name: 빌드 결과물 업로드
        uses: actions/upload-artifact@v4
        with:
          name: node-build
          path: build/

  # 최종 배포 작업
  deploy:
    name: 배포
    needs: [prepare-build, build-flutter, build-spring, build-node]
    if: always() && (needs.build-flutter.result == 'success' || needs.build-spring.result == 'success' || needs.build-node.result == 'success')
    runs-on: ubuntu-latest
    
    steps:
      - name: 배포 준비
        run: echo "🚀 버전 ${{ needs.prepare-build.outputs.version }} 배포 준비 중..."
      
      # 여기에 배포 관련 단계 추가 (AWS, Firebase, App Store 등)
      
      - name: 배포 완료 알림
        run: |
          echo "✅ 배포가 완료되었습니다!"
          echo "프로젝트: $(basename ${{ github.repository }})"
          echo "버전: ${{ needs.prepare-build.outputs.version }}"
          echo "빌드번호: ${{ needs.prepare-build.outputs.build_number }}"
          echo "타입: ${{ needs.prepare-build.outputs.project_type }}"
