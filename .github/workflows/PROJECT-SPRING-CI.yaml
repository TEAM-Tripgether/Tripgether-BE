# ===================================================================
# Spring Boot CI (빌드 전용) 워크플로우
# ===================================================================

name: PROJECT-SPRING-CI

# ===================================================================
# 📋 필수 GitHub Secrets 설정 가이드
# ===================================================================
#
# ⚠️ 사용하기 전에 반드시 다음 GitHub Secrets를 설정하세요!
# (저장소 Settings > Secrets and variables > Actions에서 설정)
#
# 🔧 필수 Secrets:
# ┌─────────────────────────────┬────────────────────────────────────┐
# │ Secret 이름                 │ 설명                               │
# ├─────────────────────────────┼────────────────────────────────────┤
# │ APPLICATION_PROD_YML        │ Spring Boot 운영 설정 파일 내용   │
# └─────────────────────────────┴────────────────────────────────────┘
#
# 🚀 워크플로우 기능:
# - Spring Boot 프로젝트 Gradle 빌드
# - test 브랜치 PR 시 빌드 검증
# - main 브랜치 PR 및 Push 시 빌드 검증
#
# 📝 사용 방법:
# 1. 위의 GitHub Secrets 설정
# 2. 아래 PROJECT_NAME을 실제 프로젝트명으로 변경
# 3. 워크플로우 활성화: 'on' 섹션의 주석 해제
#
# ===================================================================

# ===================================================================
# 트리거 설정
# ===================================================================
on:
    pull_request:
      branches:
        - test    # test 브랜치로 PR 시 빌드
        - main    # main 브랜치로 PR 시 빌드
    push:
      branches:
        - main    # main 브랜치로 Push 시 빌드
    workflow_dispatch:  # 수동 실행 허용

# ===================================================================
# 환경 변수 설정
# ===================================================================
env:
  # 🔧 프로젝트 설정 - 실제 프로젝트명으로 변경하세요
  PROJECT_NAME: "tripgether"  # 기본값: basic (프로젝트명에 맞게 수정 필요)

  # ☁️ Spring Boot 설정
  SPRING_PROFILE: "prod"
  JAVA_VERSION: "17"
  GRADLE_OPTS: "-Dspring.profiles.active=prod"

jobs:
  # ===================================================================
  # 빌드 작업
  # ===================================================================
  build:
    name: Spring Boot 애플리케이션 빌드
    runs-on: ubuntu-latest

    steps:
      # 1. 소스코드 체크아웃
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      # 2. Java 개발 환경 설정
      - name: Java 설정
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      # 3. Gradle 실행 권한 부여
      - name: Gradle Wrapper 실행권한 부여
        run: chmod +x gradlew

      # 4. Spring Boot 운영 환경 설정 파일 생성
      # GitHub Secrets에서 APPLICATION_PROD_YML 값을 읽어와서
      # src/main/resources/application-prod.yml 파일로 생성
      - name: application-prod.yml 생성
        run: |
          # 리소스 디렉토리 생성 (프로젝트 구조에 따라 경로 조정 필요)
          mkdir -p src/main/resources

          # GitHub Secrets의 APPLICATION_PROD_YML 내용을 파일로 저장
          cat << 'EOF' > ./src/main/resources/application-prod.yml
          ${{ secrets.APPLICATION_PROD_YML }}
          EOF

          echo "✅ application-prod.yml 파일 생성 완료"

      # 5. Gradle 빌드 실행
      # 테스트는 제외하고 운영 프로파일로 빌드
      - name: Build with Gradle
        run: ./gradlew clean build -x test ${{ env.GRADLE_OPTS }}

      # 6. 빌드 결과 확인
      - name: 빌드 결과 확인
        run: |
          echo "✅ 빌드가 성공적으로 완료되었습니다!"
          echo ""
          echo "📋 빌드 결과 요약:"
          echo "  🎯 프로젝트: ${{ env.PROJECT_NAME }}"
          echo "  🌿 브랜치: ${{ github.ref_name }}"
          echo "  📝 이벤트: ${{ github.event_name }}"
          echo "  👤 작성자: ${{ github.actor }}"
          echo "  🔖 커밋: ${{ github.sha }}"
          echo "  ⏰ 빌드 시간: $(date '+%Y-%m-%d %H:%M:%S')"
          echo ""
          ls -lh build/libs/ || echo "빌드 파일 확인 실패"

# ===================================================================
# 사용 예시
# ===================================================================
#
# test 브랜치 PR + main 브랜치 PR/Push 모두 빌드하는 경우:
#
# on:
#   pull_request:
#     branches:
#       - test
#       - main
#   push:
#     branches:
#       - main
#   workflow_dispatch:
#
# ===================================================================
