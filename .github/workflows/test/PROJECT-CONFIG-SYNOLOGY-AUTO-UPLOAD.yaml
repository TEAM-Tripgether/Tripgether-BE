# ===================================================================
# 프로젝트 설정 파일 관리 워크플로우
# ===================================================================
#
# 이 워크플로우는 프로젝트의 설정 파일을 안전하게 관리하고 SSH를 통해 서버에 업로드합니다.
#
# 사용 방법:
# 1. 아래 PROJECT_NAME과 PROJECT_TYPE 변수를 수정하세요.
# 2. 필요한 GitHub Secrets를 설정하세요.
#
# 필수 GitHub Secrets:
# - SERVER_HOST: 서버 호스트 주소
# - SERVER_USER: SSH 사용자명
# - SERVER_PASSWORD: SSH 비밀번호
#
# 설정 파일용 GitHub Secrets (프로젝트 유형에 따라 선택):
# 
# Backend (Spring Boot) 프로젝트:
# - APPLICATION_YML: application.yml 파일 내용
# - APPLICATION_DEV_YML: application-dev.yml 파일 내용 (옵션)
# - APPLICATION_PROD_YML: application-prod.yml 파일 내용 (옵션)
# - SA_KEY: 서비스 계정 키 파일 내용 (옵션)
# 
# Frontend 프로젝트:
# - ENV_FILE: .env 파일 내용
# - ENV_DEV_FILE: .env.development 파일 내용 (옵션)
# - ENV_PROD_FILE: .env.production 파일 내용 (옵션)
#
# 다른 설정 파일을 추가하려면:
# 1. GitHub에 해당 Secret 추가
# 2. 이 워크플로우의 파일 업로드 스크립트에 새 파일 업로드 로직 추가
# 3. "파일 업로드" 단계에서 파일 목록에 추가
# 4. 메타데이터 JSON 파일의 files 배열에 정보 추가
#
# ===================================================================

name: PROJECT-CONFIG-SYNOLOGY-AUTO-UPLOAD

on:
  push:
    branches:
      - main
  workflow_dispatch:  # 수동 실행 옵션 추가

# 프로젝트 설정 변수 - 이 부분을 프로젝트에 맞게 수정하세요
env:
  PROJECT_NAME: "your_project_name" # 여기에 프로젝트 이름을 입력하세요
  PROJECT_TYPE: "backend"           # frontend, backend 또는 version.yml에서 자동 감지

jobs:
  upload-files:
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      # 타임스탬프 폴더명 생성
      - name: 타임스탬프 폴더명 생성
        run: |
          # Asia/Seoul 로컬타임 사용
          export TZ='Asia/Seoul'
          # YYYY-MM-DD_HH-MM-SS 형식
          TIMESTAMP=$(date '+%Y-%m-%d_%H-%M-%S')
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date '+%Y-%m-%d %H:%M')" >> $GITHUB_ENV
          echo "생성된 타임스탬프: $TIMESTAMP"

      # 짧은 커밋 해시 계산
      - name: 짧은 커밋 해시 계산
        run: |
          echo "SHORT_COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
          echo "짧은 커밋 해시: $(echo ${{ github.sha }} | cut -c1-7)"

      - name: 서버에 파일 업로드
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 2022  # 필요시 포트 번호 변경
          envs: TIMESTAMP,SHORT_COMMIT_HASH,BUILD_DATE,PROJECT_NAME,PROJECT_TYPE
          script: |
            set -e
            
            echo "환경변수 설정.."
            export PW=${{ secrets.SERVER_PASSWORD }}
            
            # 메인 디렉토리 경로 설정
            MAIN_DIR="/volume1/projects/${PROJECT_NAME}/github_secret/${PROJECT_TYPE}"
            
            # 최신 파일 저장 디렉토리 생성
            echo "메인 디렉토리 생성 중... ($MAIN_DIR)"
            echo $PW | sudo -S mkdir -p $MAIN_DIR
            
            # 타임스탬프 백업 디렉토리 생성
            echo "타임스탬프 백업 디렉토리 생성 중... ($MAIN_DIR/$TIMESTAMP)"
            echo $PW | sudo -S mkdir -p $MAIN_DIR/$TIMESTAMP
            
            # 프로젝트 타입에 따라 다른 설정 파일 업로드
            FILES_JSON=""
            
            if [ "$PROJECT_TYPE" = "backend" ]; then
              echo "백엔드 프로젝트 설정 파일 업로드 중..."
              
              # application.yml 파일 업로드 (있는 경우)
              if [ ! -z "${{ secrets.APPLICATION_YML }}" ]; then
                echo "application.yml 파일 업로드 중..."
                echo "${{ secrets.APPLICATION_YML }}" | sudo tee $MAIN_DIR/application.yml > /dev/null
                echo "${{ secrets.APPLICATION_YML }}" | sudo tee $MAIN_DIR/$TIMESTAMP/application.yml > /dev/null
                echo "application.yml 업로드 완료"
                
                # JSON에 파일 정보 추가
                FILES_JSON="${FILES_JSON}
                {
                  \"file_name\": \"application.yml\",
                  \"file_path\": \"/\",
                  \"last_updated\": \"$BUILD_DATE\"
                },"
              fi
              
              # application-dev.yml 파일 업로드 (있는 경우)
              if [ ! -z "${{ secrets.APPLICATION_DEV_YML }}" ]; then
                echo "application-dev.yml 파일 업로드 중..."
                echo "${{ secrets.APPLICATION_DEV_YML }}" | sudo tee $MAIN_DIR/application-dev.yml > /dev/null
                echo "${{ secrets.APPLICATION_DEV_YML }}" | sudo tee $MAIN_DIR/$TIMESTAMP/application-dev.yml > /dev/null
                echo "application-dev.yml 업로드 완료"
                
                # JSON에 파일 정보 추가
                FILES_JSON="${FILES_JSON}
                {
                  \"file_name\": \"application-dev.yml\",
                  \"file_path\": \"/\",
                  \"last_updated\": \"$BUILD_DATE\"
                },"
              fi
              
              # application-prod.yml 파일 업로드 (있는 경우)
              if [ ! -z "${{ secrets.APPLICATION_PROD_YML }}" ]; then
                echo "application-prod.yml 파일 업로드 중..."
                echo "${{ secrets.APPLICATION_PROD_YML }}" | sudo tee $MAIN_DIR/application-prod.yml > /dev/null
                echo "${{ secrets.APPLICATION_PROD_YML }}" | sudo tee $MAIN_DIR/$TIMESTAMP/application-prod.yml > /dev/null
                echo "application-prod.yml 업로드 완료"
                
                # JSON에 파일 정보 추가
                FILES_JSON="${FILES_JSON}
                {
                  \"file_name\": \"application-prod.yml\",
                  \"file_path\": \"/\",
                  \"last_updated\": \"$BUILD_DATE\"
                },"
              fi
              
              # 서비스 계정 키 파일 업로드 (있는 경우)
              if [ ! -z "${{ secrets.SA_KEY }}" ]; then
                echo "서비스 계정 키 파일 업로드 중..."
                echo "${{ secrets.SA_KEY }}" | sed 's/\\n/\n/g' | sudo tee $MAIN_DIR/service-account-key.json > /dev/null
                echo "${{ secrets.SA_KEY }}" | sed 's/\\n/\n/g' | sudo tee $MAIN_DIR/$TIMESTAMP/service-account-key.json > /dev/null
                echo "서비스 계정 키 파일 업로드 완료"
                
                # JSON에 파일 정보 추가
                FILES_JSON="${FILES_JSON}
                {
                  \"file_name\": \"service-account-key.json\",
                  \"file_path\": \"/\",
                  \"last_updated\": \"$BUILD_DATE\"
                },"
              fi
              
            elif [ "$PROJECT_TYPE" = "frontend" ]; then
              echo "프론트엔드 프로젝트 설정 파일 업로드 중..."
              
              # .env 파일 업로드 (있는 경우)
              if [ ! -z "${{ secrets.ENV_FILE }}" ]; then
                echo ".env 파일 업로드 중..."
                echo "${{ secrets.ENV_FILE }}" | sudo tee $MAIN_DIR/.env > /dev/null
                echo "${{ secrets.ENV_FILE }}" | sudo tee $MAIN_DIR/$TIMESTAMP/.env > /dev/null
                echo ".env 업로드 완료"
                
                # JSON에 파일 정보 추가
                FILES_JSON="${FILES_JSON}
                {
                  \"file_name\": \".env\",
                  \"file_path\": \"/\",
                  \"last_updated\": \"$BUILD_DATE\"
                },"
              fi
              
              # .env.development 파일 업로드 (있는 경우)
              if [ ! -z "${{ secrets.ENV_DEV_FILE }}" ]; then
                echo ".env.development 파일 업로드 중..."
                echo "${{ secrets.ENV_DEV_FILE }}" | sudo tee $MAIN_DIR/.env.development > /dev/null
                echo "${{ secrets.ENV_DEV_FILE }}" | sudo tee $MAIN_DIR/$TIMESTAMP/.env.development > /dev/null
                echo ".env.development 업로드 완료"
                
                # JSON에 파일 정보 추가
                FILES_JSON="${FILES_JSON}
                {
                  \"file_name\": \".env.development\",
                  \"file_path\": \"/\",
                  \"last_updated\": \"$BUILD_DATE\"
                },"
              fi
              
              # .env.production 파일 업로드 (있는 경우)
              if [ ! -z "${{ secrets.ENV_PROD_FILE }}" ]; then
                echo ".env.production 파일 업로드 중..."
                echo "${{ secrets.ENV_PROD_FILE }}" | sudo tee $MAIN_DIR/.env.production > /dev/null
                echo "${{ secrets.ENV_PROD_FILE }}" | sudo tee $MAIN_DIR/$TIMESTAMP/.env.production > /dev/null
                echo ".env.production 업로드 완료"
                
                # JSON에 파일 정보 추가
                FILES_JSON="${FILES_JSON}
                {
                  \"file_name\": \".env.production\",
                  \"file_path\": \"/\",
                  \"last_updated\": \"$BUILD_DATE\"
                },"
              fi
            fi
            
            # 마지막 쉼표 제거
            FILES_JSON=$(echo "$FILES_JSON" | sed '$ s/,$//')
            
            # 메타데이터 JSON 파일 생성 및 업로드
            echo "메타데이터 JSON 파일 생성 중..."
            cat << EOF | sudo tee $MAIN_DIR/$TIMESTAMP/cicd-gitignore-file.json > /dev/null
            {
              "build_info": {
                "timestamp": "$TIMESTAMP",
                "workflow": "설정 파일 관리",
                "run_id": "${{ github.run_id }}",
                "run_number": "${{ github.run_number }}",
                "job": "upload-files",
                "event": "${{ github.event_name }}",
                "repository": "${{ github.repository }}",
                "owner": "${{ github.repository_owner }}",
                "branch": "${{ github.ref_name }}",
                "commit_hash": "${{ github.sha }}",
                "short_hash": "$SHORT_COMMIT_HASH",
                "commit_url": "https://github.com/${{ github.repository }}/commit/${{ github.sha }}",
                "actor": "${{ github.actor }}",
                "build_date": "$BUILD_DATE",
                "runner_os": "${{ runner.os }}"
              },
              "files": [
                $FILES_JSON
              ]
            }
            EOF
            echo "메타데이터 JSON 파일 업로드 완료"
            
            # 최신 메타데이터도 루트에 복사
            sudo cp $MAIN_DIR/$TIMESTAMP/cicd-gitignore-file.json $MAIN_DIR/cicd-gitignore-file.json
            
            # 파일 목록 확인
            echo "업로드된 파일 목록 (타임스탬프 폴더):"
            ls -la $MAIN_DIR/$TIMESTAMP/
            
            echo "업로드된 파일 목록 (루트 폴더):"
            ls -la $MAIN_DIR/
            
            echo "모든 파일 업로드 완료"
