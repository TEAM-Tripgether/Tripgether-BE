# ===================================================================
# Deploy 브랜치 푸시 이벤트 감지 및 배포 확인 워크플로우
# ===================================================================
#
# 이 워크플로우는 deploy 브랜치로 푸시가 발생했을 때 실행되어
# 배포 프로세스가 올바르게 트리거되었는지 확인합니다.
#
# 작동 방식:
# 1. deploy 브랜치로 푸시 발생 시 트리거
# 2. 배포 이벤트 정보 수집 및 로깅
# 3. 이전 워크플로우(PR 머지 및 체인지로그 업데이트)가 성공적으로 완료되었는지 확인
# 4. 배포 상태 알림 생성
#
# ===================================================================

name: DEPLOY TRIGGER VERIFICATION

on:
  push:
    branches: ["deploy"]

permissions:
  contents: read
  pull-requests: read
  actions: read

jobs:
  verify-deployment-trigger:
    name: 배포 트리거 확인
    runs-on: ubuntu-latest
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: deploy

      - name: 배포 이벤트 정보 수집
        id: deployment_info
        run: |
          echo "🔍 배포 브랜치 푸시 이벤트 감지됨!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📋 배포 이벤트 정보:"
          echo "  • 커밋 SHA: ${{ github.sha }}"
          echo "  • 푸시 시간: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "  • 트리거 워크플로우: ${{ github.workflow }}"
          echo "  • 액터: ${{ github.actor }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # 현재 프로젝트 버전 확인
          if [ -f ".github/scripts/version_manager.sh" ]; then
            chmod +x .github/scripts/version_manager.sh
            CURRENT_VERSION=$(./.github/scripts/version_manager.sh get | tail -n 1)
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          elif [ -f "version.yml" ]; then
            CURRENT_VERSION=$(grep "^version:" version.yml | sed 's/version: *"\([^"]*\)".*/\1/')
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          elif [ -f "build.gradle" ]; then
            CURRENT_VERSION=$(grep "version = '" build.gradle | sed "s/version = '//" | sed "s/'//")
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          elif [ -f "pubspec.yaml" ]; then
            CURRENT_VERSION=$(grep "^version:" pubspec.yaml | sed 's/version: *\([0-9.]*\).*/\1/')
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          elif [ -f "package.json" ]; then
            CURRENT_VERSION=$(grep '"version":' package.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "version=Unknown" >> $GITHUB_OUTPUT
          fi

      - name: 이전 워크플로우 실행 확인
        id: check_previous_workflow
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 이전 체인지로그 업데이트 워크플로우 확인 중..."
          
          # 최근 AUTO UPDATE PROJECT CHANGELOG 워크플로우 실행 확인
          CHANGELOG_RUNS=$(gh run list --workflow "AUTO UPDATE PROJECT CHANGELOG" --limit 1 --json status,conclusion,databaseId)
          
          if [ -z "$CHANGELOG_RUNS" ] || [ "$CHANGELOG_RUNS" == "[]" ]; then
            echo "⚠️ 최근 체인지로그 업데이트 워크플로우 실행을 찾을 수 없습니다"
            echo "previous_workflow_status=not_found" >> $GITHUB_OUTPUT
          else
            CONCLUSION=$(echo $CHANGELOG_RUNS | jq -r '.[0].conclusion')
            RUN_ID=$(echo $CHANGELOG_RUNS | jq -r '.[0].databaseId')
            
            echo "✅ 이전 워크플로우(ID: $RUN_ID) 상태: $CONCLUSION"
            echo "previous_workflow_status=$CONCLUSION" >> $GITHUB_OUTPUT
            echo "previous_workflow_id=$RUN_ID" >> $GITHUB_OUTPUT
          fi

      - name: CHANGELOG 파일 확인
        id: check_changelog
        run: |
          echo "🔍 CHANGELOG 파일 확인 중..."
          
          if [ -f "CHANGELOG.md" ] && [ -f "CHANGELOG.json" ]; then
            LAST_VERSION=$(grep -m 1 "\[.*\]" CHANGELOG.md | sed -E 's/.*\[(.*)\].*/\1/')
            echo "✅ CHANGELOG 파일 존재: 최신 버전 $LAST_VERSION"
            echo "changelog_exists=true" >> $GITHUB_OUTPUT
            echo "last_version=$LAST_VERSION" >> $GITHUB_OUTPUT
          else
            echo "⚠️ CHANGELOG 파일이 존재하지 않습니다"
            echo "changelog_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 배포 상태 확인 및 알림
        run: |
          VERSION="${{ steps.deployment_info.outputs.version }}"
          PREVIOUS_STATUS="${{ steps.check_previous_workflow.outputs.previous_workflow_status }}"
          CHANGELOG_EXISTS="${{ steps.check_changelog.outputs.changelog_exists }}"
          
          echo "🚀 배포 트리거 검증 결과:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          if [ "$PREVIOUS_STATUS" == "success" ]; then
            echo "✅ 이전 체인지로그 업데이트 워크플로우: 성공"
          elif [ "$PREVIOUS_STATUS" == "not_found" ]; then
            echo "⚠️ 이전 체인지로그 업데이트 워크플로우: 찾을 수 없음"
          else
            echo "❌ 이전 체인지로그 업데이트 워크플로우: $PREVIOUS_STATUS"
          fi
          
          if [ "$CHANGELOG_EXISTS" == "true" ]; then
            echo "✅ CHANGELOG 파일: 존재함 (최신 버전: ${{ steps.check_changelog.outputs.last_version }})"
          else
            echo "❌ CHANGELOG 파일: 존재하지 않음"
          fi
          
          echo "📋 현재 배포 버전: $VERSION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔔 배포 트리거 확인 완료! 다음 배포 워크플로우가 실행될 것입니다."

  notify-deployment-status:
    name: 배포 상태 알림
    runs-on: ubuntu-latest
    needs: verify-deployment-trigger
    steps:
      - name: 배포 검증 완료 알림
        run: |
          echo "🎉 Deploy 브랜치 푸시 이벤트 감지 및 배포 확인 완료!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📋 검증 정보:"
          echo "  • 워크플로우: ${{ github.workflow }}"
          echo "  • 러너: ${{ runner.name }}"
          echo "  • 검증 시간: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "다음 단계로 자동 배포 워크플로우가 실행될 것입니다."
